// automatically generated by build.rs script

pub const RTE_PTYPE_INNER_L3_IPV4: u32 = 0x00100000; // 0x00100000
pub const RTE_PTYPE_INNER_L3_IPV6: u32 = 0x00300000; // 0x00300000
// #define RTE_ETH_TX_BUFFER_SIZE(sz) (sizeof(struct rte_eth_dev_tx_buffer) + (sz) * sizeof(struct rte_mbuf *))
pub const RTE_XABORT_NESTED: u32 = 1 << 5; // (1 << 5)
pub const RTE_LIBRTE_CRYPTODEV: u32 = 1; // 1
pub const RTE_EXEC_ENV: &'static str = "linuxapp"; // "linuxapp"
pub const RTE_RING_PAUSE_REP_COUNT: u32 = 0; // 0
pub const RTE_LIBRTE_TABLE: u32 = 1; // 1
pub const RTE_PMD_RING_MAX_RX_RINGS: u32 = 16; // 16
pub const RTE_ETH_FLOW_NONFRAG_IPV4_TCP: u32 = 4; // 4
pub const RTE_LIBRTE_ENIC_PMD: u32 = 1; // 1
// #define RTE_MBUF_INDIRECT(mb) ((mb)->ol_flags & IND_ATTACHED_MBUF)
// #define RTE_FUNC_PTR_OR_RET(func) do { if ((func) == NULL) { RTE_PMD_DEBUG_TRACE("Function not supported\n"); return; } } while (0)
pub const RTE_IXGBE_INC_VECTOR: u32 = 1; // 1
// #define RTE_MEMPOOL_ALIGN RTE_CACHE_LINE_SIZE
pub const RTE_ETH_FLOW_NONFRAG_IPV4_OTHER: u32 = 7; // 7
// #define RTE_ALIGN_CEIL(val,align) RTE_ALIGN_FLOOR(((val) + ((typeof(val)) (align) - 1)), align)
pub const RTE_LIBRTE_PORT: u32 = 1; // 1
pub const RTE_MEMZONE_256MB: u32 = 0x00020000; // 0x00020000
pub const RTE_PTYPE_L3_MASK: u32 = 0x000000f0; // 0x000000f0
pub const RTE_INTR_EVENT_DEL: u32 = 2; // 2UL
pub const RTE_RING_NAMESIZE: u32 = 32; // 32
pub const RTE_NTUPLE_FLAGS_TCP_FLAG: u32 = 0x0020; // 0x0020
// #define RTE_ETH_VALID_PORTID_OR_ERR_RET(port_id,retval) do { if (!rte_eth_dev_is_valid_port(port_id)) { RTE_PMD_DEBUG_TRACE("Invalid port_id=%d\n", port_id); return retval; } } while (0)
// #define RTE_MEMPOOL_ALIGN_MASK (RTE_MEMPOOL_ALIGN - 1)
pub const RTE_PTYPE_INNER_L2_ETHER_VLAN: u32 = 0x00020000; // 0x00020000
pub const RTE_LOG_ALERT: u32 = 2; // 2U
pub const RTE_RTM_MAX_RETRIES: u32 = 10; // (10)
pub const RTE_LIBRTE_PMD_SZEDATA2_AS: u32 = 0; // 0
// #define RTE_FLEX_FILTER_MASK_SIZE (RTE_ALIGN(RTE_FLEX_FILTER_MAXLEN, CHAR_BIT) / CHAR_BIT)
pub const RTE_TEST_PMD: u32 = 1; // 1
// #define RTE_TUNNEL_FILTER_IMAC_TENID (ETH_TUNNEL_FILTER_IMAC | ETH_TUNNEL_FILTER_TENID)
// #define RTE_DECLARE_PER_LCORE(type,name) extern __thread __typeof__(type) per_lcore_ ##name
// #define RTE_MEMPOOL_MZ_FORMAT RTE_MEMPOOL_MZ_PREFIX "%s"
pub const RTE_ETH_DEV_INTR_LSC: u32 = 0x0002; // 0x0002
// #define RTE_FUNC_PTR_OR_ERR_RET(func,retval) do { if ((func) == NULL) { RTE_PMD_DEBUG_TRACE("Function not supported\n"); return retval; } } while (0)
pub const RTE_CACHE_LINE_SIZE_LOG2: u32 = 6; // 6
pub const RTE_MEMZONE_256KB: u32 = 0x00010000; // 0x00010000
// #define RTE_ALIGN(val,align) RTE_ALIGN_CEIL(val, align)
pub const RTE_LIBRTE_KNI: u32 = 1; // 1
// #define RTE_ETHDEV_HAS_LRO_SUPPORT 
pub const RTE_MAX_NUMA_NODES: u32 = 8; // 8
pub const RTE_LIBRTE_I40E_RX_ALLOW_BULK_ALLOC: u32 = 1; // 1
pub const RTE_PTYPE_TUNNEL_NVGRE: u32 = 0x00004000; // 0x00004000
// #define RTE_MBUF_DIRECT(mb) (!RTE_MBUF_INDIRECT(mb))
pub const RTE_XABORT_LOCK_BUSY: u32 = 0xff; // (0xff)
pub const RTE_FLEX_FILTER_MAXLEN: u32 = 128; // 128
// #define RTE_ALIGN_FLOOR(val,align) (typeof(val))((val) & (~((typeof(val))((align) - 1))))
pub const RTE_LIBRTE_IP_FRAG_MAX_FRAG: u32 = 4; // 4
pub const RTE_LIBRTE_I40E_RX_OLFLAGS_ENABLE: u32 = 1; // 1
pub const RTE_PTYPE_L3_IPV4_EXT: u32 = 0x00000030; // 0x00000030
pub const RTE_PTYPE_L4_MASK: u32 = 0x00000f00; // 0x00000f00
pub const RTE_LOGTYPE_POWER: u32 = 0x00000400; // 0x00000400
pub const RTE_XABORT_RETRY: u32 = 1 << 1; // (1 << 1)
pub const RTE_LOGTYPE_TIMER: u32 = 0x00000010; // 0x00000010
pub const RTE_XABORT_CONFLICT: u32 = 1 << 2; // (1 << 2)
pub const RTE_LOGTYPE_METER: u32 = 0x00000800; // 0x00000800
pub const RTE_ETH_FLOW_NONFRAG_IPV6_UDP: u32 = 11; // 11
pub const RTE_LIBRTE_FM10K_PMD: u32 = 1; // 1
pub const RTE_PTYPE_L4_TCP: u32 = 0x00000100; // 0x00000100
pub const RTE_PTYPE_L2_MASK: u32 = 0x0000000f; // 0x0000000f
// #define RTE_TUNNEL_FILTER_IMAC_IVLAN (ETH_TUNNEL_FILTER_IMAC | ETH_TUNNEL_FILTER_IVLAN)
pub const RTE_PTYPE_L4_FRAG: u32 = 0x00000300; // 0x00000300
pub const RTE_PCI_EXTENDED_TAG: &'static str = ""; // ""
pub const RTE_PTYPE_L4_NONFRAG: u32 = 0x00000600; // 0x00000600
pub const RTE_BAD_PHYS_ADDR: i32 = -1; // ((phys_addr_t)-1)
pub const RTE_MBUF_PRIV_ALIGN: u32 = 8; // 8
pub const RTE_MACHINE_CPUFLAG_SSSE3: u32 = 1; // 1
// #define RTE_DOM0_IOCTL_ATTACH_TO_MEMSEG _IOWR(0, 2 , char *)
pub const RTE_LIBRTE_PMD_VHOST: u32 = 1; // 1
pub const RTE_PKTMBUF_HEADROOM: u32 = 128; // 128
pub const RTE_RETA_GROUP_SIZE: u32 = 64; // 64
pub const RTE_LOGTYPE_USER1: u32 = 0x01000000; // 0x01000000
pub const RTE_KNI_VHOST_MAX_CACHE_SIZE: u32 = 1024; // 1024
pub const RTE_LOGTYPE_USER6: u32 = 0x20000000; // 0x20000000
pub const RTE_PTYPE_INNER_L2_MASK: u32 = 0x000f0000; // 0x000f0000
pub const RTE_INTR_EVENT_ADD: u32 = 1; // 1UL
// #define RTE_ATOMIC64_INIT(val) { (val) }
pub const RTE_MACHINE_CPUFLAG_PCLMULQDQ: u32 = 1; // 1
pub const RTE_MEMZONE_512MB: u32 = 0x00040000; // 0x00040000
pub const RTE_PMD_PACKET_PREFETCH: u32 = 1; // 1
// #define RTE_DOM0_IOCTL_GET_NUM_MEMSEG _IOWR(0, 3, int)
// #define RTE_DOM0_IOCTL_GET_MEMSEG_INFO _IOWR(0, 4, void *)
pub const RTE_ARCH_64: u32 = 1; // 1
pub const RTE_LOGTYPE_PORT: u32 = 0x00002000; // 0x00002000
pub const RTE_PTYPE_L4_ICMP: u32 = 0x00000500; // 0x00000500
pub const RTE_LIBRTE_DISTRIBUTOR: u32 = 1; // 1
pub const RTE_LOG_ERR: u32 = 4; // 4U
// #define RTE_SPINLOCK_INITIALIZER { 0 }
pub const RTE_LIBRTE_MLX5_TX_MP_CACHE: u32 = 8; // 8
pub const RTE_ETH_FLOW_NONFRAG_IPV4_SCTP: u32 = 6; // 6
pub const RTE_XABORT_DEBUG: u32 = 1 << 4; // (1 << 4)
pub const RTE_XABORT_EXPLICIT: u32 = 1 << 0; // (1 << 0)
// #define RTE_ATOMIC32_INIT(val) { (val) }
pub const RTE_PTYPE_L3_IPV6_EXT: u32 = 0x000000c0; // 0x000000c0
pub const RTE_LIBRTE_I40E_QUEUE_NUM_PER_PF: u32 = 64; // 64
pub const RTE_CACHE_LINE_SIZE: u32 = 64; // 64
pub const RTE_LIBRTE_MLX4_SOFT_COUNTERS: u32 = 1; // 1
pub const RTE_ETHDEV_QUEUE_STAT_CNTRS: u32 = 16; // 16
// #define RTE_SPINLOCK_RECURSIVE_INITIALIZER {RTE_SPINLOCK_INITIALIZER, -1, 0}
// #define RTE_FLOW_MASK_ARRAY_SIZE (RTE_ALIGN(RTE_ETH_FLOW_MAX, UINT32_BIT)/UINT32_BIT)
pub const RTE_MEMZONE_NAMESIZE: u32 = 32; // 32
pub const RTE_PTYPE_L2_ETHER_ARP: u32 = 0x00000003; // 0x00000003
// #define RTE_RWLOCK_INITIALIZER { 0 }
pub const RTE_LIBRTE_I40E_QUEUE_NUM_PER_VF: u32 = 4; // 4
pub const RTE_LIBRTE_I40E_QUEUE_NUM_PER_VM: u32 = 4; // 4
pub const RTE_LOGTYPE_RING: u32 = 0x00000004; // 0x00000004
pub const RTE_LIBRTE_PMD_NULL: u32 = 1; // 1
pub const RTE_TOOLCHAIN_GCC: u32 = 1; // 1
// #define RTE_MBUF_DEFAULT_BUF_SIZE (RTE_MBUF_DEFAULT_DATAROOM + RTE_PKTMBUF_HEADROOM)
pub const RTE_EAL_IGB_UIO: u32 = 1; // 1
pub const RTE_PTYPE_L3_IPV6_EXT_UNKNOWN: u32 = 0x000000e0; // 0x000000e0
pub const RTE_PCI_MAX_READ_REQUEST_SIZE: u32 = 0; // 0
pub const RTE_LOGTYPE_MALLOC: u32 = 0x00000002; // 0x00000002
// #define RTE_DIM(a) (sizeof (a) / sizeof ((a)[0]))
pub const RTE_LIBRTE_MLX4_MAX_INLINE: u32 = 0; // 0
pub const RTE_MEMPOOL_CACHE_MAX_SIZE: u32 = 512; // 512
// #define RTE_ETH_IS_IPV4_HDR(ptype) ((ptype) & RTE_PTYPE_L3_IPV4)
pub const RTE_INTR_VEC_ZERO_OFFSET: u32 = 0; // 0
pub const RTE_LIBRTE_ACL: u32 = 1; // 1
// #define RTE_EAL_MEMPOOL_RWLOCK (&rte_eal_get_configuration()->mem_config->mplock)
pub const RTE_MAX_QUEUES_PER_PORT: u32 = 1024; // 1024
// #define RTE_PMD_DEBUG_TRACE(...) 
pub const RTE_LOG_CRIT: u32 = 3; // 3U
// #define RTE_PTR_ALIGN_FLOOR(ptr,align) ((typeof(ptr))RTE_ALIGN_FLOOR((uintptr_t)ptr, align))
pub const RTE_LIBRTE_RING: u32 = 1; // 1
pub const RTE_MACHINE_CPUFLAG_SSE: u32 = 1; // 1
pub const RTE_LIBRTE_IXGBE_PMD: u32 = 1; // 1
pub const RTE_LIBRTE_KVARGS: u32 = 1; // 1
// #define RTE_SYM_HASH_MASK_ARRAY_SIZE (RTE_ALIGN(RTE_ETH_FLOW_MAX, UINT32_BIT)/UINT32_BIT)
pub const RTE_LIBRTE_FM10K_RX_OLFLAGS_ENABLE: u32 = 1; // 1
pub const RTE_MACHINE_CPUFLAG_AES: u32 = 1; // 1
pub const RTE_HEAP_NUM_FREELISTS: u32 = 13; // 13
pub const RTE_MACHINE_CPUFLAG_F16C: u32 = 1; // 1
// #define RTE_XABORT_CODE(x) (((x) >> 24) & 0xff)
pub const RTE_ARCH_X86: u32 = 1; // 1
pub const RTE_RING_QUOT_EXCEED: u32 = 1 << 31; // (1 << 31)
pub const RTE_LIBRTE_PMD_BOND: u32 = 1; // 1
pub const RTE_MACHINE_CPUFLAG_SSE2: u32 = 1; // 1
pub const RTE_MACHINE_CPUFLAG_SSE3: u32 = 1; // 1
pub const RTE_NTUPLE_FLAGS_PROTO: u32 = 0x0010; // 0x0010
pub const RTE_LOG_LEVEL: u32 = 8; // 8
pub const RTE_MEMZONE_SIZE_HINT_ONLY: u32 = 0x00000004; // 0x00000004
pub const RTE_LIBRTE_LPM: u32 = 1; // 1
pub const RTE_PTYPE_INNER_L3_IPV6_EXT_UNKNOWN: u32 = 0x00600000; // 0x00600000
pub const RTE_ETH_FLOW_L2_PAYLOAD: u32 = 14; // 14
pub const RTE_ETH_INSET_SIZE_MAX: u32 = 128; // 128
pub const RTE_TOOLCHAIN: &'static str = "gcc"; // "gcc"
pub const RTE_LIBRTE_PIPELINE: u32 = 1; // 1
pub const RTE_LIBRTE_CFGFILE: u32 = 1; // 1
pub const RTE_MAX_MEMSEG: u32 = 256; // 256
pub const RTE_LIBRTE_EAL: u32 = 1; // 1
pub const RTE_ETH_FLOW_IPV4: u32 = 2; // 2
pub const RTE_IXGBE_RX_OLFLAGS_ENABLE: u32 = 1; // 1
pub const RTE_CACHE_LINE_MIN_SIZE: u32 = 64; // 64
pub const RTE_ETH_FLOW_IPV6: u32 = 8; // 8
pub const RTE_KNI_KMOD: u32 = 1; // 1
pub const RTE_LIBRTE_VHOST: u32 = 1; // 1
pub const RTE_NTUPLE_FLAGS_DST_IP: u32 = 0x0001; // 0x0001
pub const RTE_MACHINE_CPUFLAG_AVX: u32 = 1; // 1
pub const RTE_EAL_VFIO: u32 = 1; // 1
pub const RTE_LIBRTE_SCHED: u32 = 1; // 1
// #define RTE_DOM0_IOCTL_PREPARE_MEMSEG _IOWR(0, 1 , struct memory_info)
pub const RTE_PTYPE_INNER_L4_MASK: u32 = 0x0f000000; // 0x0f000000
pub const RTE_MAX_LCORE: u32 = 128; // 128
pub const RTE_MEMPOOL_HEADER_COOKIE2: u64 = 0xf2eef2eedadd2e55; // 0xf2eef2eedadd2e55ULL
pub const RTE_ETH_FLOW_MAX: u32 = 18; // 18
pub const RTE_LIBRTE_FM10K_INC_VECTOR: u32 = 1; // 1
pub const RTE_KNI_PREEMPT_DEFAULT: u32 = 1; // 1
pub const RTE_LIBRTE_PMD_RING: u32 = 1; // 1
pub const RTE_ETH_FDIR_MAX_FLEXLEN: u32 = 16; // 16
pub const RTE_PTYPE_L2_ETHER_TIMESYNC: u32 = 0x00000002; // 0x00000002
pub const RTE_LIBRTE_ENA_PMD: u32 = 1; // 1
pub const RTE_MEMPOOL_MZ_PREFIX: &'static str = "MP_"; // "MP_"
pub const RTE_LOG_WARNING: u32 = 5; // 5U
pub const RTE_CRYPTODEV_NAME_LEN: u32 = 64; // 64
pub const RTE_LIBRTE_CMDLINE: u32 = 1; // 1
// #define RTE_STR(x) _RTE_STR(x)
pub const RTE_ETHDEV_RXTX_CALLBACKS: u32 = 1; // 1
pub const RTE_MAX_TAILQ: u32 = 32; // 32
pub const RTE_LOGTYPE_KNI: u32 = 0x00000100; // 0x00000100
pub const RTE_PTYPE_TUNNEL_GENEVE: u32 = 0x00005000; // 0x00005000
// #define RTE_PROC_PRIMARY_OR_ERR_RET(retval) do { if (rte_eal_process_type() != RTE_PROC_PRIMARY) { RTE_PMD_DEBUG_TRACE("Cannot run in secondary processes\n"); return retval; } } while (0)
pub const RTE_PTYPE_L2_ETHER_LLDP: u32 = 0x00000004; // 0x00000004
// #define RTE_TAILQ_CAST(tailq_entry,struct_name) (struct struct_name *)&(tailq_entry)->tailq_head
pub const RTE_LIBRTE_I40E_INC_VECTOR: u32 = 1; // 1
pub const RTE_EXEC_ENV_LINUXAPP: u32 = 1; // 1
// #define RTE_DEFINE_PER_LCORE(type,name) __thread __typeof__(type) per_lcore_ ##name
pub const RTE_ETH_QUEUE_STATE_STARTED: u32 = 1; // 1
pub const RTE_ETH_FLOW_NONFRAG_IPV6_OTHER: u32 = 13; // 13
pub const RTE_LIBRTE_VIRTIO_PMD: u32 = 1; // 1
pub const RTE_PTYPE_INNER_L4_ICMP: u32 = 0x05000000; // 0x05000000
// #define RTE_5TUPLE_FLAGS ( RTE_NTUPLE_FLAGS_DST_IP | RTE_NTUPLE_FLAGS_SRC_IP | RTE_NTUPLE_FLAGS_DST_PORT | RTE_NTUPLE_FLAGS_SRC_PORT | RTE_NTUPLE_FLAGS_PROTO)
pub const RTE_MEMZONE_1GB: u32 = 0x00000002; // 0x00000002
pub const RTE_LOGTYPE_USER2: u32 = 0x02000000; // 0x02000000
pub const RTE_LOGTYPE_USER3: u32 = 0x04000000; // 0x04000000
pub const RTE_LOGTYPE_USER4: u32 = 0x08000000; // 0x08000000
pub const RTE_LOGTYPE_USER7: u32 = 0x40000000; // 0x40000000
pub const RTE_LOGTYPE_USER8: u32 = 0x80000000; // 0x80000000
pub const RTE_PTYPE_INNER_L4_TCP: u32 = 0x01000000; // 0x01000000
// #define RTE_MBUF_ASSERT(exp) do { } while (0)
pub const RTE_MEMZONE_4GB: u32 = 0x00080000; // 0x00080000
pub const RTE_NEXT_ABI: u32 = 1; // 1
// #define RTE_LOG(l,t,...) (void)((RTE_LOG_ ## l <= RTE_LOG_LEVEL) ? rte_log(RTE_LOG_ ## l, RTE_LOGTYPE_ ## t, #t ": " __VA_ARGS__) : 0)
pub const RTE_LIBRTE_ETHER: u32 = 1; // 1
pub const RTE_NTUPLE_FLAGS_SRC_IP: u32 = 0x0002; // 0x0002
// #define RTE_TUNNEL_FILTER_OMAC_TENID_IMAC (ETH_TUNNEL_FILTER_OMAC | ETH_TUNNEL_FILTER_TENID | ETH_TUNNEL_FILTER_IMAC)
pub const RTE_MACHINE: &'static str = "native"; // "native"
// #define RTE_PTR_ALIGN_CEIL(ptr,align) RTE_PTR_ALIGN_FLOOR((typeof(ptr))RTE_PTR_ADD(ptr, (align) - 1), align)
pub const RTE_ETH_DEV_DETACHABLE: u32 = 0x0001; // 0x0001
pub const RTE_MAX_MEMZONE: u32 = 2560; // 2560
pub const RTE_PTYPE_TUNNEL_VXLAN: u32 = 0x00003000; // 0x00003000
pub const RTE_MAX_RXTX_INTR_VEC_ID: u32 = 32; // 32
pub const RTE_LOGTYPE_HASH: u32 = 0x00000040; // 0x00000040
pub const RTE_LIBRTE_MLX4_TX_MP_CACHE: u32 = 8; // 8
pub const RTE_ETH_FLOW_IPV6_TCP_EX: u32 = 16; // 16
pub const RTE_ETH_XSTATS_NAME_SIZE: u32 = 64; // 64
pub const RTE_MEMZONE_2MB: u32 = 0x00000001; // 0x00000001
pub const RTE_PCI_DRV_DETACHABLE: u32 = 0x0010; // 0x0010
// #define RTE_COMPILE_TIME_CPUFLAGS RTE_CPUFLAG_SSE,RTE_CPUFLAG_SSE2,RTE_CPUFLAG_SSE3,RTE_CPUFLAG_SSSE3,RTE_CPUFLAG_SSE4_1,RTE_CPUFLAG_SSE4_2,RTE_CPUFLAG_AES,RTE_CPUFLAG_PCLMULQDQ,RTE_CPUFLAG_AVX,RTE_CPUFLAG_RDRAND,RTE_CPUFLAG_FSGSBASE,RTE_CPUFLAG_F16C,RTE_CPUFLAG_AVX2
// #define RTE_PROC_PRIMARY_OR_RET() do { if (rte_eal_process_type() != RTE_PROC_PRIMARY) { RTE_PMD_DEBUG_TRACE("Cannot run in secondary processes\n"); return; } } while (0)
pub const RTE_CRYPTO_MAX_DEVS: u32 = 64; // 64
pub const RTE_ETH_FLOW_NONFRAG_IPV4_UDP: u32 = 5; // 5
pub const RTE_ETH_FLOW_IPV6_UDP_EX: u32 = 17; // 17
pub const RTE_PTYPE_INNER_L3_IPV4_EXT_UNKNOWN: u32 = 0x00400000; // 0x00400000
// #define RTE_PTR_ALIGN(ptr,align) RTE_PTR_ALIGN_CEIL(ptr, align)
pub const RTE_MBUF_REFCNT_ATOMIC: u32 = 1; // 1
pub const RTE_PTYPE_INNER_L4_SCTP: u32 = 0x04000000; // 0x04000000
// #define RTE_TUNNEL_FILTER_IMAC_IVLAN_TENID (ETH_TUNNEL_FILTER_IMAC | ETH_TUNNEL_FILTER_IVLAN | ETH_TUNNEL_FILTER_TENID)
// #define RTE_BYTE_ORDER RTE_LITTLE_ENDIAN
pub const RTE_LIBRTE_HASH: u32 = 1; // 1
pub const RTE_BIG_ENDIAN: u32 = 1; // 1
pub const RTE_LOG_EMERG: u32 = 1; // 1U
pub const RTE_LOGTYPE_TABLE: u32 = 0x00004000; // 0x00004000
pub const RTE_LOG_HISTORY: u32 = 256; // 256
pub const RTE_PTYPE_L4_UDP: u32 = 0x00000200; // 0x00000200
pub const RTE_LIBRTE_EM_PMD: u32 = 1; // 1
pub const RTE_MAX_LCORE_FREQS: u32 = 64; // 64
pub const RTE_LIBRTE_PMD_NULL_CRYPTO: u32 = 1; // 1
pub const RTE_LOGTYPE_MBUF: u32 = 0x00010000; // 0x00010000
pub const RTE_EAL_PMD_PATH: &'static str = ""; // ""
// #define RTE_ETH_IS_TUNNEL_PKT(ptype) ((ptype) & (RTE_PTYPE_TUNNEL_MASK | RTE_PTYPE_INNER_L2_MASK | RTE_PTYPE_INNER_L3_MASK | RTE_PTYPE_INNER_L4_MASK))
pub const RTE_MEMPOOL_NAMESIZE: u32 = 32; // 32
pub const RTE_LOGTYPE_USER5: u32 = 0x10000000; // 0x10000000
pub const RTE_LIBRTE_MLX5_MAX_INLINE: u32 = 0; // 0
// #define RTE_LCORE_FOREACH_SLAVE(i) for (i = rte_get_next_lcore(-1, 1, 0); i<RTE_MAX_LCORE; i = rte_get_next_lcore(i, 1, 0))
pub const RTE_INTR_VEC_RXTX_OFFSET: u32 = 1; // 1
pub const RTE_LIBRTE_IGB_PMD: u32 = 1; // 1
pub const RTE_PMD_RING_MAX_TX_RINGS: u32 = 16; // 16
pub const RTE_LIBRTE_MBUF: u32 = 1; // 1
pub const RTE_ETH_QUEUE_STATE_STOPPED: u32 = 0; // 0
pub const RTE_ETHTYPE_FLAGS_DROP: u32 = 0x0002; // 0x0002
pub const RTE_TAILQ_NAMESIZE: u32 = 32; // 32
pub const RTE_PCI_DRV_FORCE_UNBIND: u32 = 0x0004; // 0x0004
pub const RTE_NTUPLE_FLAGS_DST_PORT: u32 = 0x0004; // 0x0004
pub const RTE_PTYPE_INNER_L3_MASK: u32 = 0x00f00000; // 0x00f00000
// #define RTE_PTR_DIFF(ptr1,ptr2) ((uintptr_t)(ptr1) - (uintptr_t)(ptr2))
pub const RTE_LOGTYPE_ACL: u32 = 0x00000200; // 0x00000200
pub const RTE_LITTLE_ENDIAN: u32 = 2; // 2
pub const RTE_MBUF_DEFAULT_DATAROOM: u32 = 2048; // 2048
pub const RTE_PTYPE_TUNNEL_GRENAT: u32 = 0x00006000; // 0x00006000
pub const RTE_ARCH: &'static str = "x86_64"; // "x86_64"
// #define RTE_MEMPOOL_OBJ_NAME RTE_MEMPOOL_MZ_FORMAT
pub const RTE_LOG_NOTICE: u32 = 6; // 6U
pub const RTE_MACHINE_CPUFLAG_SSE4_1: u32 = 1; // 1
pub const RTE_MACHINE_CPUFLAG_SSE4_2: u32 = 1; // 1
pub const RTE_XABORT_CAPACITY: u32 = 1 << 3; // (1 << 3)
pub const RTE_LOGTYPE_SCHED: u32 = 0x00001000; // 0x00001000
pub const RTE_PTYPE_L3_IPV4_EXT_UNKNOWN: u32 = 0x00000090; // 0x00000090
// #define RTE_TAILQ_LOOKUP(name,struct_name) RTE_TAILQ_CAST(rte_eal_tailq_lookup(name), struct_name)
pub const RTE_PTYPE_TUNNEL_IP: u32 = 0x00001000; // 0x00001000
// #define RTE_PTR_ADD(ptr,x) ((void*)((uintptr_t)(ptr) + (x)))
pub const RTE_ETHTYPE_FLAGS_MAC: u32 = 0x0001; // 0x0001
// #define RTE_CACHE_LINE_MASK (RTE_CACHE_LINE_SIZE-1)
// #define RTE_PTR_SUB(ptr,x) ((void*)((uintptr_t)ptr - (x)))
// #define RTE_MAX(a,b) ({ typeof (a) _a = (a); typeof (b) _b = (b); _a > _b ? _a : _b; })
pub const RTE_LIBRTE_POWER: u32 = 1; // 1
pub const RTE_ARCH_X86_64: u32 = 1; // 1
pub const RTE_PTYPE_L3_IPV4: u32 = 0x00000010; // 0x00000010
pub const RTE_PTYPE_L3_IPV6: u32 = 0x00000040; // 0x00000040
pub const RTE_PTYPE_UNKNOWN: u32 = 0x00000000; // 0x00000000
pub const RTE_LOGTYPE_LPM: u32 = 0x00000080; // 0x00000080
pub const RTE_LIBRTE_JOBSTATS: u32 = 1; // 1
// #define RTE_EAL_TAILQ_RWLOCK (&rte_eal_get_configuration()->mem_config->qlock)
pub const RTE_LIBRTE_VMXNET3_PMD: u32 = 1; // 1
pub const RTE_QAT_PMD_MAX_NB_SESSIONS: u32 = 2048; // 2048
pub const RTE_MAGIC: u32 = 19820526; // 19820526
pub const RTE_LOGTYPE_EAL: u32 = 0x00000001; // 0x00000001
// #define RTE_MIN(a,b) ({ typeof (a) _a = (a); typeof (b) _b = (b); _a < _b ? _a : _b; })
pub const RTE_MAX_ETHPORTS: u32 = 32; // 32
pub const RTE_MEMPOOL_TRAILER_COOKIE: u64 = 0xadd2e55badbadbad; // 0xadd2e55badbadbadULL
// #define RTE_SET_USED(x) (void)(x)
pub const RTE_RING_MZ_PREFIX: &'static str = "RG_"; // "RG_"
pub const RTE_PTYPE_INNER_L4_UDP: u32 = 0x02000000; // 0x02000000
pub const RTE_NTUPLE_FLAGS_SRC_PORT: u32 = 0x0008; // 0x0008
pub const RTE_LOGTYPE_CRYPTODEV: u32 = 0x00020000; // 0x00020000
pub const RTE_MAX_THREAD_NAME_LEN: u32 = 16; // 16
pub const RTE_PTYPE_INNER_L3_IPV6_EXT: u32 = 0x00500000; // 0x00500000
pub const RTE_ETH_FLOW_RAW: u32 = 1; // 1
// #define RTE_ETH_VALID_PORTID_OR_RET(port_id) do { if (!rte_eth_dev_is_valid_port(port_id)) { RTE_PMD_DEBUG_TRACE("Invalid port_id=%d\n", port_id); return; } } while (0)
// #define RTE_LEN2MASK(ln,tp) ((tp)((uint64_t)-1 >> (sizeof(uint64_t) * CHAR_BIT - (ln))))
// #define RTE_ETH_IS_IPV6_HDR(ptype) ((ptype) & RTE_PTYPE_L3_IPV6)
// #define RTE_MBUF_PREFETCH_TO_FREE(m) do { if ((m) != NULL) rte_prefetch0(m); } while (0)
// #define RTE_PCI_DEVICE(vend,dev) .vendor_id = (vend), .device_id = (dev), .subsystem_vendor_id = PCI_ANY_ID, .subsystem_device_id = PCI_ANY_ID
// #define RTE_2TUPLE_FLAGS ( RTE_NTUPLE_FLAGS_DST_PORT | RTE_NTUPLE_FLAGS_PROTO)
pub const RTE_EPOLL_PER_THREAD: i32 = -1; // -1
pub const RTE_SCHED_PORT_N_GRINDERS: u32 = 8; // 8
pub const RTE_LOGTYPE_PMD: u32 = 0x00000020; // 0x00000020
pub const RTE_MACHINE_CPUFLAG_FSGSBASE: u32 = 1; // 1
pub const RTE_PTYPE_L4_SCTP: u32 = 0x00000400; // 0x00000400
pub const RTE_PTYPE_INNER_L4_NONFRAG: u32 = 0x06000000; // 0x06000000
pub const RTE_MACHINE_CPUFLAG_RDRAND: u32 = 1; // 1
pub const RTE_LIBRTE_MLX5_SGE_WR_N: u32 = 4; // 4
pub const RTE_MACHINE_CPUFLAG_AVX2: u32 = 1; // 1
pub const RTE_ETH_FLOW_NONFRAG_IPV6_SCTP: u32 = 12; // 12
pub const RTE_PCI_DRV_INTR_LSC: u32 = 0x0008; // 0x0008
pub const RTE_RING_SZ_MASK: u32 = 0x0fffffff; // (unsigned)(0x0fffffff)
// #define RTE_XBEGIN_STARTED (~0u)
// #define RTE_LCORE_FOREACH(i) for (i = rte_get_next_lcore(-1, 0, 0); i<RTE_MAX_LCORE; i = rte_get_next_lcore(i, 0, 0))
pub const RTE_LIBRTE_TIMER: u32 = 1; // 1
pub const RTE_LIBRTE_METER: u32 = 1; // 1
// #define RTE_CACHE_LINE_ROUNDUP(size) (RTE_CACHE_LINE_SIZE * ((size + RTE_CACHE_LINE_SIZE - 1) / RTE_CACHE_LINE_SIZE))
pub const RTE_MEMZONE_16GB: u32 = 0x00000200; // 0x00000200
pub const RTE_LIBRTE_EAL_VMWARE_TSC_MAP_SUPPORT: u32 = 1; // 1
pub const RTE_ETH_NAME_MAX_LEN: u32 = 32; // (32)
pub const RTE_LIBRTE_CXGBE_PMD: u32 = 1; // 1
pub const RTE_PTYPE_TUNNEL_MASK: u32 = 0x0000f000; // 0x0000f000
pub const RTE_PTYPE_INNER_L2_ETHER: u32 = 0x00010000; // 0x00010000
// #define RTE_BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))
pub const RTE_ETH_FLOW_NONFRAG_IPV6_TCP: u32 = 10; // 10
pub const RTE_MEMZONE_16MB: u32 = 0x00000100; // 0x00000100
pub const RTE_PTYPE_TUNNEL_GRE: u32 = 0x00002000; // 0x00002000
pub const RTE_LIBRTE_NET: u32 = 1; // 1
pub const RTE_LIBRTE_I40E_ITR_INTERVAL: i32 = -1; // -1
pub const RTE_LOG_DEBUG: u32 = 8; // 8U
pub const RTE_MEMPOOL_HEADER_COOKIE1: u64 = 0xbadbadbadadd2e55; // 0xbadbadbadadd2e55ULL
pub const RTE_ETH_FLOW_UNKNOWN: u32 = 0; // 0
pub const RTE_TAILQ_RING_NAME: &'static str = "RTE_RING"; // "RTE_RING"
pub const RTE_LOGTYPE_PIPELINE: u32 = 0x00008000; // 0x00008000
pub const RTE_ETH_DEV_BONDED_SLAVE: u32 = 0x0004; // 0x0004
pub const RTE_LIBRTE_VHOST_USER: u32 = 1; // 1
pub const RTE_PTYPE_INNER_L4_FRAG: u32 = 0x03000000; // 0x03000000
pub const RTE_PCI_DRV_NEED_MAPPING: u32 = 0x0001; // 0x0001
pub const RTE_LIBRTE_PMD_AF_PACKET: u32 = 1; // 1
pub const RTE_APP_TEST: u32 = 1; // 1
pub const RTE_LOGTYPE_MEMPOOL: u32 = 0x00000008; // 0x00000008
// #define RTE_VERIFY(exp) do { if (!(exp)) rte_panic("line %d\tassert \"" #exp "\" failed\n", __LINE__); } while (0)
pub const RTE_LOG_INFO: u32 = 7; // 7U
pub const RTE_PTYPE_INNER_L3_IPV4_EXT: u32 = 0x00200000; // 0x00200000
pub const RTE_ETH_FLOW_IPV6_EX: u32 = 15; // 15
pub const RTE_LIBRTE_REORDER: u32 = 1; // 1
pub const RTE_PTYPE_L2_ETHER: u32 = 0x00000001; // 0x00000001
pub const RTE_LIBRTE_IP_FRAG: u32 = 1; // 1
// #define RTE_ATOMIC16_INIT(val) { (val) }
pub const RTE_ETH_FLOW_FRAG_IPV4: u32 = 3; // 3
pub const RTE_ETH_FLOW_FRAG_IPV6: u32 = 9; // 9
// #define RTE_ETH_DEV_SRIOV(dev) ((dev)->data->sriov)
pub const RTE_LIBRTE_MLX4_SGE_WR_N: u32 = 4; // 4
// #define RTE_PER_LCORE(name) (per_lcore_ ##name)
pub const RTE_LIBRTE_MEMPOOL: u32 = 1; // 1
pub const RTE_LIBRTE_I40E_PMD: u32 = 1; // 1
