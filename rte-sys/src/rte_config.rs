// automatically generated by build.rs script

pub const ARP_HRD_ETHER: u32 = 1; 
pub const ARP_OP_INVREPLY: u32 = 9; 
pub const ARP_OP_INVREQUEST: u32 = 8; 
pub const ARP_OP_REPLY: u32 = 2; 
pub const ARP_OP_REQUEST: u32 = 1; 
pub const ARP_OP_REVREPLY: u32 = 4; 
pub const ARP_OP_REVREQUEST: u32 = 3; 
pub const BALANCE_XMIT_POLICY_LAYER23: u32 = 1; // (1)
pub const BALANCE_XMIT_POLICY_LAYER2: u32 = 0; // (0)
pub const BALANCE_XMIT_POLICY_LAYER34: u32 = 2; // (2)
pub const BONDING_MODE_8023AD: u32 = 4; // (4)
pub const BONDING_MODE_ACTIVE_BACKUP: u32 = 1; // (1)
pub const BONDING_MODE_ALB: u32 = 6; // (6)
pub const BONDING_MODE_BALANCE: u32 = 2; // (2)
pub const BONDING_MODE_BROADCAST: u32 = 3; // (3)
pub const BONDING_MODE_ROUND_ROBIN: u32 = 0; // (0)
pub const BONDING_MODE_TLB: u32 = 5; // (5)
pub const CMDLINE_IPADDR_NETWORK: u32 = 0x04; 
pub const CMDLINE_IPADDR_V4: u32 = 0x01; 
pub const CMDLINE_IPADDR_V6: u32 = 0x02; 
pub const CMDLINE_KEY_BKSPACE: u32 = 4; 
pub const CMDLINE_KEY_CTRL_A: u32 = 6; 
pub const CMDLINE_KEY_CTRL_B: u32 = 12; 
pub const CMDLINE_KEY_CTRL_C: u32 = 10; 
pub const CMDLINE_KEY_CTRL_D: u32 = 15; 
pub const CMDLINE_KEY_CTRL_E: u32 = 7; 
pub const CMDLINE_KEY_CTRL_F: u32 = 11; 
pub const CMDLINE_KEY_CTRL_K: u32 = 8; 
pub const CMDLINE_KEY_CTRL_L: u32 = 16; 
pub const CMDLINE_KEY_CTRL_N: u32 = 24; 
pub const CMDLINE_KEY_CTRL_P: u32 = 23; 
pub const CMDLINE_KEY_CTRL_W: u32 = 22; 
pub const CMDLINE_KEY_CTRL_Y: u32 = 9; 
pub const CMDLINE_KEY_DOWN_ARR: u32 = 1; 
pub const CMDLINE_KEY_HELP: u32 = 21; 
pub const CMDLINE_KEY_LEFT_ARR: u32 = 3; 
pub const CMDLINE_KEY_META_BKSPACE: u32 = 18; 
pub const CMDLINE_KEY_META_D: u32 = 25; 
pub const CMDLINE_KEY_RETURN2: u32 = 17; 
pub const CMDLINE_KEY_RETURN: u32 = 5; 
pub const CMDLINE_KEY_RIGHT_ARR: u32 = 2; 
pub const CMDLINE_KEY_SUPPR: u32 = 13; 
pub const CMDLINE_KEY_TAB: u32 = 14; 
pub const CMDLINE_KEY_UP_ARR: u32 = 0; 
pub const CMDLINE_KEY_WLEFT: u32 = 19; 
pub const CMDLINE_KEY_WRIGHT: u32 = 20; 
pub const CMDLINE_PARSE_AMBIGUOUS: i32 = -1; 
pub const CMDLINE_PARSE_BAD_ARGS: i32 = -3; 
pub const CMDLINE_PARSE_COMPLETED_BUFFER: u32 = 2; 
pub const CMDLINE_PARSE_COMPLETE_AGAIN: u32 = 1; 
pub const CMDLINE_PARSE_COMPLETE_FINISHED: u32 = 0; 
pub const CMDLINE_PARSE_NOMATCH: i32 = -2; 
pub const CMDLINE_PARSE_RESULT_BUFSIZE: u32 = 8192; 
pub const CMDLINE_PARSE_SUCCESS: u32 = 0; 
pub const CMDLINE_VT100_BUF_SIZE: u32 = 8; 
pub const ETHER_ADDR_FMT_SIZE: u32 = 18; 
pub const ETHER_ADDR_LEN: u32 = 6; 
pub const ETHER_CRC_LEN: u32 = 4; 
pub const ETHER_GROUP_ADDR: u32 = 0x01; 
pub const ETHER_LOCAL_ADMIN_ADDR: u32 = 0x02; 
pub const ETHER_MAX_JUMBO_FRAME_LEN: u32 = 0x3F00; 
pub const ETHER_MAX_LEN: u32 = 1518; 
pub const ETHER_MAX_VLAN_ID: u32 = 4095; 
pub const ETHER_MIN_LEN: u32 = 64; 
pub const ETHER_MIN_MTU: u32 = 68; 
pub const ETHER_TYPE_1588: u32 = 0x88F7; 
pub const ETHER_TYPE_ARP: u32 = 0x0806; 
pub const ETHER_TYPE_IPV4: u32 = 0x0800; 
pub const ETHER_TYPE_IPV6: u32 = 0x86DD; 
pub const ETHER_TYPE_LEN: u32 = 2; 
pub const ETHER_TYPE_RARP: u32 = 0x8035; 
pub const ETHER_TYPE_SLOW: u32 = 0x8809; 
pub const ETHER_TYPE_TEB: u32 = 0x6558; 
pub const ETHER_TYPE_VLAN: u32 = 0x8100; 
pub const ETH_DCB_NUM_QUEUES: u32 = 128; 
pub const ETH_DCB_NUM_TCS: u32 = 8; 
pub const ETH_DCB_NUM_USER_PRIORITIES: u32 = 8; 
pub const ETH_DCB_PFC_SUPPORT: u32 = 0x00000002; 
pub const ETH_DCB_PG_SUPPORT: u32 = 0x00000001; 
pub const ETH_L2_TUNNEL_ENABLE_MASK: u32 = 0x00000001; 
pub const ETH_L2_TUNNEL_FORWARDING_MASK: u32 = 0x00000008; 
pub const ETH_L2_TUNNEL_INSERTION_MASK: u32 = 0x00000002; 
pub const ETH_L2_TUNNEL_STRIPPING_MASK: u32 = 0x00000004; 
pub const ETH_LINK_AUTONEG: u32 = 1; 
pub const ETH_LINK_DOWN: u32 = 0; 
pub const ETH_LINK_FIXED: u32 = 0; 
pub const ETH_LINK_FULL_DUPLEX: u32 = 1; 
pub const ETH_LINK_HALF_DUPLEX: u32 = 0; 
pub const ETH_LINK_SPEED_100G: u32 = 1 << 14; // (1 << 14)
pub const ETH_LINK_SPEED_100M: u32 = 1 << 4; // (1 << 4)
pub const ETH_LINK_SPEED_100M_HD: u32 = 1 << 3; // (1 << 3)
pub const ETH_LINK_SPEED_10G: u32 = 1 << 8; // (1 << 8)
pub const ETH_LINK_SPEED_10M: u32 = 1 << 2; // (1 << 2)
pub const ETH_LINK_SPEED_10M_HD: u32 = 1 << 1; // (1 << 1)
pub const ETH_LINK_SPEED_1G: u32 = 1 << 5; // (1 << 5)
pub const ETH_LINK_SPEED_20G: u32 = 1 << 9; // (1 << 9)
pub const ETH_LINK_SPEED_25G: u32 = 1 << 10; // (1 << 10)
pub const ETH_LINK_SPEED_2_5G: u32 = 1 << 6; // (1 << 6)
pub const ETH_LINK_SPEED_40G: u32 = 1 << 11; // (1 << 11)
pub const ETH_LINK_SPEED_50G: u32 = 1 << 12; // (1 << 12)
pub const ETH_LINK_SPEED_56G: u32 = 1 << 13; // (1 << 13)
pub const ETH_LINK_SPEED_5G: u32 = 1 << 7; // (1 << 7)
pub const ETH_LINK_SPEED_AUTONEG: u32 = 0 << 0; // (0 << 0)
pub const ETH_LINK_SPEED_FIXED: u32 = 1 << 0; // (1 << 0)
pub const ETH_LINK_UP: u32 = 1; 
pub const ETH_MAX_VMDQ_POOL: u32 = 64; 
pub const ETH_MIRROR_DOWNLINK_PORT: u32 = 0x04; 
pub const ETH_MIRROR_MAX_VLANS: u32 = 64; 
pub const ETH_MIRROR_UPLINK_PORT: u32 = 0x02; 
pub const ETH_MIRROR_VIRTUAL_POOL_DOWN: u32 = 0x10; 
pub const ETH_MIRROR_VIRTUAL_POOL_UP: u32 = 0x01; 
pub const ETH_MIRROR_VLAN: u32 = 0x08; 
pub const ETH_MQ_RX_DCB_FLAG: u32 = 0x2; 
pub const ETH_MQ_RX_RSS_FLAG: u32 = 0x1; 
pub const ETH_MQ_RX_VMDQ_FLAG: u32 = 0x4; 
pub const ETH_NUM_RECEIVE_MAC_ADDR: u32 = 128; 
pub const ETH_RSS_RETA_SIZE_128: u32 = 128; 
pub const ETH_RSS_RETA_SIZE_512: u32 = 512; 
pub const ETH_RSS_RETA_SIZE_64: u32 = 64; 
pub const ETH_SPEED_NUM_100G: u32 = 100000; 
pub const ETH_SPEED_NUM_100M: u32 = 100; 
pub const ETH_SPEED_NUM_10G: u32 = 10000; 
pub const ETH_SPEED_NUM_10M: u32 = 10; 
pub const ETH_SPEED_NUM_1G: u32 = 1000; 
pub const ETH_SPEED_NUM_20G: u32 = 20000; 
pub const ETH_SPEED_NUM_25G: u32 = 25000; 
pub const ETH_SPEED_NUM_2_5G: u32 = 2500; 
pub const ETH_SPEED_NUM_40G: u32 = 40000; 
pub const ETH_SPEED_NUM_50G: u32 = 50000; 
pub const ETH_SPEED_NUM_56G: u32 = 56000; 
pub const ETH_SPEED_NUM_5G: u32 = 5000; 
pub const ETH_SPEED_NUM_NONE: u32 = 0; 
pub const ETH_TUNNEL_FILTER_IIP: u32 = 0x20; 
pub const ETH_TUNNEL_FILTER_IMAC: u32 = 0x08; 
pub const ETH_TUNNEL_FILTER_IVLAN: u32 = 0x10; 
pub const ETH_TUNNEL_FILTER_OIP: u32 = 0x02; 
pub const ETH_TUNNEL_FILTER_OMAC: u32 = 0x01; 
pub const ETH_TUNNEL_FILTER_TENID: u32 = 0x04; 
pub const ETH_TXQ_FLAGS_NOMULTMEMP: u32 = 0x0004; 
pub const ETH_TXQ_FLAGS_NOMULTSEGS: u32 = 0x0001; 
pub const ETH_TXQ_FLAGS_NOREFCOUNT: u32 = 0x0002; 
pub const ETH_TXQ_FLAGS_NOVLANOFFL: u32 = 0x0100; 
pub const ETH_TXQ_FLAGS_NOXSUMSCTP: u32 = 0x0200; 
pub const ETH_TXQ_FLAGS_NOXSUMTCP: u32 = 0x0800; 
pub const ETH_TXQ_FLAGS_NOXSUMUDP: u32 = 0x0400; 
pub const ETH_VLAN_EXTEND_MASK: u32 = 0x0004; 
pub const ETH_VLAN_EXTEND_OFFLOAD: u32 = 0x0004; 
pub const ETH_VLAN_FILTER_MASK: u32 = 0x0002; 
pub const ETH_VLAN_FILTER_OFFLOAD: u32 = 0x0002; 
pub const ETH_VLAN_ID_MAX: u32 = 0x0FFF; 
pub const ETH_VLAN_STRIP_MASK: u32 = 0x0001; 
pub const ETH_VLAN_STRIP_OFFLOAD: u32 = 0x0001; 
pub const ETH_VMDQ_ACCEPT_BROADCAST: u32 = 0x0008; 
pub const ETH_VMDQ_ACCEPT_HASH_MC: u32 = 0x0002; 
pub const ETH_VMDQ_ACCEPT_HASH_UC: u32 = 0x0004; 
pub const ETH_VMDQ_ACCEPT_MULTICAST: u32 = 0x0010; 
pub const ETH_VMDQ_ACCEPT_UNTAG: u32 = 0x0001; 
pub const ETH_VMDQ_DCB_NUM_QUEUES: u32 = 128; 
pub const ETH_VMDQ_MAX_VLAN_FILTERS: u32 = 64; 
pub const ETH_VMDQ_NUM_UC_HASH_ARRAY: u32 = 128; 
pub const IPV4_ALLHOSTS_GROUP: u32 = 0xe0000001; // ((uint32_t)0xe0000001)
pub const IPV4_ALLRTRS_GROUP: u32 = 0xe0000002; // ((uint32_t)0xe0000002)
pub const IPV4_ANY: u32 = 0x00000000; // ((uint32_t)0x00000000)
pub const IPV4_BROADCAST: u32 = 0xe0000000; // ((uint32_t)0xe0000000)
pub const IPV4_HDR_DF_SHIFT: u32 = 14; 
pub const IPV4_HDR_FO_SHIFT: u32 = 3; 
pub const IPV4_HDR_IHL_MASK: u32 = 0x0f; // (0x0f)
pub const IPV4_HDR_MF_SHIFT: u32 = 13; 
pub const IPV4_HDR_OFFSET_UNITS: u32 = 8; 
pub const IPV4_IHL_MULTIPLIER: u32 = 4; // (4)
pub const IPV4_LOOPBACK: u32 = 0x7f000001; // ((uint32_t)0x7f000001)
pub const IPV4_MAX_LOCAL_GROUP: u32 = 0xe00000ff; // ((uint32_t)0xe00000ff)
pub const IPV4_MAX_PKT_LEN: u32 = 65535; 
pub const RDLINE_BUF_SIZE: u32 = 512; 
pub const RDLINE_HISTORY_MAX_LINE: u32 = 64; 
pub const RDLINE_PROMPT_SIZE: u32 = 32; 
pub const RDLINE_RES_COMPLETE: u32 = 2; 
pub const RDLINE_RES_EOF: i32 = -2; 
pub const RDLINE_RES_EXITED: i32 = -3; 
pub const RDLINE_RES_NOT_RUNNING: i32 = -1; 
pub const RDLINE_RES_SUCCESS: u32 = 0; 
pub const RDLINE_RES_VALIDATED: u32 = 1; 
pub const RDLINE_VT100_BUF_SIZE: u32 = 8; 
pub const RTE_APP_TEST: u32 = 1; 
pub const RTE_ARCH: &'static str = "x86_64"; 
pub const RTE_ARCH_64: u32 = 1; 
pub const RTE_ARCH_X86: u32 = 1; 
pub const RTE_ARCH_X86_64: u32 = 1; 
pub const RTE_BAD_PHYS_ADDR: i32 = -1; // ((phys_addr_t)-1)
pub const RTE_BIG_ENDIAN: u32 = 1; 
pub const RTE_CACHE_LINE_MIN_SIZE: u32 = 64; 
pub const RTE_CACHE_LINE_SIZE: u32 = 64; 
pub const RTE_CACHE_LINE_SIZE_LOG2: u32 = 6; 
pub const RTE_CRYPTODEV_NAME_LEN: u32 = 64; 
pub const RTE_CRYPTO_MAX_DEVS: u32 = 64; 
pub const RTE_EAL_IGB_UIO: u32 = 1; 
pub const RTE_EAL_PMD_PATH: &'static str = ""; 
pub const RTE_EAL_VFIO: u32 = 1; 
pub const RTE_EPOLL_PER_THREAD: i32 = -1; 
pub const RTE_ETHDEV_QUEUE_STAT_CNTRS: u32 = 16; 
pub const RTE_ETHDEV_RXTX_CALLBACKS: u32 = 1; 
pub const RTE_ETHTYPE_FLAGS_DROP: u32 = 0x0002; 
pub const RTE_ETHTYPE_FLAGS_MAC: u32 = 0x0001; 
pub const RTE_ETH_DEV_BONDED_SLAVE: u32 = 0x0004; 
pub const RTE_ETH_DEV_DETACHABLE: u32 = 0x0001; 
pub const RTE_ETH_DEV_INTR_LSC: u32 = 0x0002; 
pub const RTE_ETH_FDIR_MAX_FLEXLEN: u32 = 16; 
pub const RTE_ETH_FLOW_FRAG_IPV4: u32 = 3; 
pub const RTE_ETH_FLOW_FRAG_IPV6: u32 = 9; 
pub const RTE_ETH_FLOW_IPV4: u32 = 2; 
pub const RTE_ETH_FLOW_IPV6: u32 = 8; 
pub const RTE_ETH_FLOW_IPV6_EX: u32 = 15; 
pub const RTE_ETH_FLOW_IPV6_TCP_EX: u32 = 16; 
pub const RTE_ETH_FLOW_IPV6_UDP_EX: u32 = 17; 
pub const RTE_ETH_FLOW_L2_PAYLOAD: u32 = 14; 
pub const RTE_ETH_FLOW_MAX: u32 = 18; 
pub const RTE_ETH_FLOW_NONFRAG_IPV4_OTHER: u32 = 7; 
pub const RTE_ETH_FLOW_NONFRAG_IPV4_SCTP: u32 = 6; 
pub const RTE_ETH_FLOW_NONFRAG_IPV4_TCP: u32 = 4; 
pub const RTE_ETH_FLOW_NONFRAG_IPV4_UDP: u32 = 5; 
pub const RTE_ETH_FLOW_NONFRAG_IPV6_OTHER: u32 = 13; 
pub const RTE_ETH_FLOW_NONFRAG_IPV6_SCTP: u32 = 12; 
pub const RTE_ETH_FLOW_NONFRAG_IPV6_TCP: u32 = 10; 
pub const RTE_ETH_FLOW_NONFRAG_IPV6_UDP: u32 = 11; 
pub const RTE_ETH_FLOW_RAW: u32 = 1; 
pub const RTE_ETH_FLOW_UNKNOWN: u32 = 0; 
pub const RTE_ETH_INSET_SIZE_MAX: u32 = 128; 
pub const RTE_ETH_NAME_MAX_LEN: u32 = 32; // (32)
pub const RTE_ETH_QUEUE_STATE_STARTED: u32 = 1; 
pub const RTE_ETH_QUEUE_STATE_STOPPED: u32 = 0; 
pub const RTE_ETH_XSTATS_NAME_SIZE: u32 = 64; 
pub const RTE_EXEC_ENV: &'static str = "linuxapp"; 
pub const RTE_EXEC_ENV_LINUXAPP: u32 = 1; 
pub const RTE_FLEX_FILTER_MAXLEN: u32 = 128; 
pub const RTE_HEAP_NUM_FREELISTS: u32 = 13; 
pub const RTE_INTR_EVENT_ADD: u32 = 1; // 1UL
pub const RTE_INTR_EVENT_DEL: u32 = 2; // 2UL
pub const RTE_INTR_VEC_RXTX_OFFSET: u32 = 1; 
pub const RTE_INTR_VEC_ZERO_OFFSET: u32 = 0; 
pub const RTE_IXGBE_INC_VECTOR: u32 = 1; 
pub const RTE_IXGBE_RX_OLFLAGS_ENABLE: u32 = 1; 
pub const RTE_KNI_KMOD: u32 = 1; 
pub const RTE_KNI_NAMESIZE: u32 = 32; 
pub const RTE_KNI_PREEMPT_DEFAULT: u32 = 1; 
pub const RTE_KNI_VHOST_MAX_CACHE_SIZE: u32 = 1024; 
pub const RTE_LIBRTE_ACL: u32 = 1; 
pub const RTE_LIBRTE_CFGFILE: u32 = 1; 
pub const RTE_LIBRTE_CMDLINE: u32 = 1; 
pub const RTE_LIBRTE_CRYPTODEV: u32 = 1; 
pub const RTE_LIBRTE_CXGBE_PMD: u32 = 1; 
pub const RTE_LIBRTE_DISTRIBUTOR: u32 = 1; 
pub const RTE_LIBRTE_EAL: u32 = 1; 
pub const RTE_LIBRTE_EAL_VMWARE_TSC_MAP_SUPPORT: u32 = 1; 
pub const RTE_LIBRTE_EM_PMD: u32 = 1; 
pub const RTE_LIBRTE_ENA_PMD: u32 = 1; 
pub const RTE_LIBRTE_ENIC_PMD: u32 = 1; 
pub const RTE_LIBRTE_ETHER: u32 = 1; 
pub const RTE_LIBRTE_FM10K_INC_VECTOR: u32 = 1; 
pub const RTE_LIBRTE_FM10K_PMD: u32 = 1; 
pub const RTE_LIBRTE_FM10K_RX_OLFLAGS_ENABLE: u32 = 1; 
pub const RTE_LIBRTE_HASH: u32 = 1; 
pub const RTE_LIBRTE_I40E_INC_VECTOR: u32 = 1; 
pub const RTE_LIBRTE_I40E_ITR_INTERVAL: i32 = -1; 
pub const RTE_LIBRTE_I40E_PMD: u32 = 1; 
pub const RTE_LIBRTE_I40E_QUEUE_NUM_PER_PF: u32 = 64; 
pub const RTE_LIBRTE_I40E_QUEUE_NUM_PER_VF: u32 = 4; 
pub const RTE_LIBRTE_I40E_QUEUE_NUM_PER_VM: u32 = 4; 
pub const RTE_LIBRTE_I40E_RX_ALLOW_BULK_ALLOC: u32 = 1; 
pub const RTE_LIBRTE_I40E_RX_OLFLAGS_ENABLE: u32 = 1; 
pub const RTE_LIBRTE_IGB_PMD: u32 = 1; 
pub const RTE_LIBRTE_IP_FRAG: u32 = 1; 
pub const RTE_LIBRTE_IP_FRAG_MAX_FRAG: u32 = 4; 
pub const RTE_LIBRTE_IXGBE_PMD: u32 = 1; 
pub const RTE_LIBRTE_JOBSTATS: u32 = 1; 
pub const RTE_LIBRTE_KNI: u32 = 1; 
pub const RTE_LIBRTE_KVARGS: u32 = 1; 
pub const RTE_LIBRTE_LPM: u32 = 1; 
pub const RTE_LIBRTE_MBUF: u32 = 1; 
pub const RTE_LIBRTE_MEMPOOL: u32 = 1; 
pub const RTE_LIBRTE_METER: u32 = 1; 
pub const RTE_LIBRTE_MLX4_MAX_INLINE: u32 = 0; 
pub const RTE_LIBRTE_MLX4_SGE_WR_N: u32 = 4; 
pub const RTE_LIBRTE_MLX4_SOFT_COUNTERS: u32 = 1; 
pub const RTE_LIBRTE_MLX4_TX_MP_CACHE: u32 = 8; 
pub const RTE_LIBRTE_MLX5_MAX_INLINE: u32 = 0; 
pub const RTE_LIBRTE_MLX5_SGE_WR_N: u32 = 4; 
pub const RTE_LIBRTE_MLX5_TX_MP_CACHE: u32 = 8; 
pub const RTE_LIBRTE_NET: u32 = 1; 
pub const RTE_LIBRTE_PIPELINE: u32 = 1; 
pub const RTE_LIBRTE_PMD_AF_PACKET: u32 = 1; 
pub const RTE_LIBRTE_PMD_BOND: u32 = 1; 
pub const RTE_LIBRTE_PMD_NULL: u32 = 1; 
pub const RTE_LIBRTE_PMD_NULL_CRYPTO: u32 = 1; 
pub const RTE_LIBRTE_PMD_RING: u32 = 1; 
pub const RTE_LIBRTE_PMD_SZEDATA2_AS: u32 = 0; 
pub const RTE_LIBRTE_PMD_VHOST: u32 = 1; 
pub const RTE_LIBRTE_PORT: u32 = 1; 
pub const RTE_LIBRTE_POWER: u32 = 1; 
pub const RTE_LIBRTE_REORDER: u32 = 1; 
pub const RTE_LIBRTE_RING: u32 = 1; 
pub const RTE_LIBRTE_SCHED: u32 = 1; 
pub const RTE_LIBRTE_TABLE: u32 = 1; 
pub const RTE_LIBRTE_TIMER: u32 = 1; 
pub const RTE_LIBRTE_VHOST: u32 = 1; 
pub const RTE_LIBRTE_VHOST_USER: u32 = 1; 
pub const RTE_LIBRTE_VIRTIO_PMD: u32 = 1; 
pub const RTE_LIBRTE_VMXNET3_PMD: u32 = 1; 
pub const RTE_LITTLE_ENDIAN: u32 = 2; 
pub const RTE_LOGTYPE_ACL: u32 = 0x00000200; 
pub const RTE_LOGTYPE_CRYPTODEV: u32 = 0x00020000; 
pub const RTE_LOGTYPE_EAL: u32 = 0x00000001; 
pub const RTE_LOGTYPE_HASH: u32 = 0x00000040; 
pub const RTE_LOGTYPE_KNI: u32 = 0x00000100; 
pub const RTE_LOGTYPE_LPM: u32 = 0x00000080; 
pub const RTE_LOGTYPE_MALLOC: u32 = 0x00000002; 
pub const RTE_LOGTYPE_MBUF: u32 = 0x00010000; 
pub const RTE_LOGTYPE_MEMPOOL: u32 = 0x00000008; 
pub const RTE_LOGTYPE_METER: u32 = 0x00000800; 
pub const RTE_LOGTYPE_PIPELINE: u32 = 0x00008000; 
pub const RTE_LOGTYPE_PMD: u32 = 0x00000020; 
pub const RTE_LOGTYPE_PORT: u32 = 0x00002000; 
pub const RTE_LOGTYPE_POWER: u32 = 0x00000400; 
pub const RTE_LOGTYPE_RING: u32 = 0x00000004; 
pub const RTE_LOGTYPE_SCHED: u32 = 0x00001000; 
pub const RTE_LOGTYPE_TABLE: u32 = 0x00004000; 
pub const RTE_LOGTYPE_TIMER: u32 = 0x00000010; 
pub const RTE_LOGTYPE_USER1: u32 = 0x01000000; 
pub const RTE_LOGTYPE_USER2: u32 = 0x02000000; 
pub const RTE_LOGTYPE_USER3: u32 = 0x04000000; 
pub const RTE_LOGTYPE_USER4: u32 = 0x08000000; 
pub const RTE_LOGTYPE_USER5: u32 = 0x10000000; 
pub const RTE_LOGTYPE_USER6: u32 = 0x20000000; 
pub const RTE_LOGTYPE_USER7: u32 = 0x40000000; 
pub const RTE_LOGTYPE_USER8: u32 = 0x80000000; 
pub const RTE_LOG_ALERT: u32 = 2; // 2U
pub const RTE_LOG_CRIT: u32 = 3; // 3U
pub const RTE_LOG_DEBUG: u32 = 8; // 8U
pub const RTE_LOG_EMERG: u32 = 1; // 1U
pub const RTE_LOG_ERR: u32 = 4; // 4U
pub const RTE_LOG_HISTORY: u32 = 256; 
pub const RTE_LOG_INFO: u32 = 7; // 7U
pub const RTE_LOG_LEVEL: u32 = 8; 
pub const RTE_LOG_NOTICE: u32 = 6; // 6U
pub const RTE_LOG_WARNING: u32 = 5; // 5U
pub const RTE_MACHINE: &'static str = "native"; 
pub const RTE_MACHINE_CPUFLAG_AES: u32 = 1; 
pub const RTE_MACHINE_CPUFLAG_AVX2: u32 = 1; 
pub const RTE_MACHINE_CPUFLAG_AVX: u32 = 1; 
pub const RTE_MACHINE_CPUFLAG_F16C: u32 = 1; 
pub const RTE_MACHINE_CPUFLAG_FSGSBASE: u32 = 1; 
pub const RTE_MACHINE_CPUFLAG_PCLMULQDQ: u32 = 1; 
pub const RTE_MACHINE_CPUFLAG_RDRAND: u32 = 1; 
pub const RTE_MACHINE_CPUFLAG_SSE2: u32 = 1; 
pub const RTE_MACHINE_CPUFLAG_SSE3: u32 = 1; 
pub const RTE_MACHINE_CPUFLAG_SSE4_1: u32 = 1; 
pub const RTE_MACHINE_CPUFLAG_SSE4_2: u32 = 1; 
pub const RTE_MACHINE_CPUFLAG_SSE: u32 = 1; 
pub const RTE_MACHINE_CPUFLAG_SSSE3: u32 = 1; 
pub const RTE_MAGIC: u32 = 19820526; 
pub const RTE_MAX_ETHPORTS: u32 = 32; 
pub const RTE_MAX_LCORE: u32 = 128; 
pub const RTE_MAX_LCORE_FREQS: u32 = 64; 
pub const RTE_MAX_MEMSEG: u32 = 256; 
pub const RTE_MAX_MEMZONE: u32 = 2560; 
pub const RTE_MAX_NUMA_NODES: u32 = 8; 
pub const RTE_MAX_QUEUES_PER_PORT: u32 = 1024; 
pub const RTE_MAX_RXTX_INTR_VEC_ID: u32 = 32; 
pub const RTE_MAX_TAILQ: u32 = 32; 
pub const RTE_MAX_THREAD_NAME_LEN: u32 = 16; 
pub const RTE_MBUF_DEFAULT_DATAROOM: u32 = 2048; 
pub const RTE_MBUF_PRIV_ALIGN: u32 = 8; 
pub const RTE_MBUF_REFCNT_ATOMIC: u32 = 1; 
pub const RTE_MEMPOOL_CACHE_MAX_SIZE: u32 = 512; 
pub const RTE_MEMPOOL_HEADER_COOKIE1: u64 = 0xbadbadbadadd2e55; // 0xbadbadbadadd2e55ULL
pub const RTE_MEMPOOL_HEADER_COOKIE2: u64 = 0xf2eef2eedadd2e55; // 0xf2eef2eedadd2e55ULL
pub const RTE_MEMPOOL_MZ_PREFIX: &'static str = "MP_"; 
pub const RTE_MEMPOOL_NAMESIZE: u32 = 32; 
pub const RTE_MEMPOOL_TRAILER_COOKIE: u64 = 0xadd2e55badbadbad; // 0xadd2e55badbadbadULL
pub const RTE_MEMZONE_16GB: u32 = 0x00000200; 
pub const RTE_MEMZONE_16MB: u32 = 0x00000100; 
pub const RTE_MEMZONE_1GB: u32 = 0x00000002; 
pub const RTE_MEMZONE_256KB: u32 = 0x00010000; 
pub const RTE_MEMZONE_256MB: u32 = 0x00020000; 
pub const RTE_MEMZONE_2MB: u32 = 0x00000001; 
pub const RTE_MEMZONE_4GB: u32 = 0x00080000; 
pub const RTE_MEMZONE_512MB: u32 = 0x00040000; 
pub const RTE_MEMZONE_NAMESIZE: u32 = 32; 
pub const RTE_MEMZONE_SIZE_HINT_ONLY: u32 = 0x00000004; 
pub const RTE_NEXT_ABI: u32 = 1; 
pub const RTE_NTUPLE_FLAGS_DST_IP: u32 = 0x0001; 
pub const RTE_NTUPLE_FLAGS_DST_PORT: u32 = 0x0004; 
pub const RTE_NTUPLE_FLAGS_PROTO: u32 = 0x0010; 
pub const RTE_NTUPLE_FLAGS_SRC_IP: u32 = 0x0002; 
pub const RTE_NTUPLE_FLAGS_SRC_PORT: u32 = 0x0008; 
pub const RTE_NTUPLE_FLAGS_TCP_FLAG: u32 = 0x0020; 
pub const RTE_PCI_DRV_DETACHABLE: u32 = 0x0010; 
pub const RTE_PCI_DRV_FORCE_UNBIND: u32 = 0x0004; 
pub const RTE_PCI_DRV_INTR_LSC: u32 = 0x0008; 
pub const RTE_PCI_DRV_NEED_MAPPING: u32 = 0x0001; 
pub const RTE_PCI_EXTENDED_TAG: &'static str = ""; 
pub const RTE_PCI_MAX_READ_REQUEST_SIZE: u32 = 0; 
pub const RTE_PKTMBUF_HEADROOM: u32 = 128; 
pub const RTE_PMD_PACKET_PREFETCH: u32 = 1; 
pub const RTE_PMD_RING_MAX_RX_RINGS: u32 = 16; 
pub const RTE_PMD_RING_MAX_TX_RINGS: u32 = 16; 
pub const RTE_PTYPE_INNER_L2_ETHER: u32 = 0x00010000; 
pub const RTE_PTYPE_INNER_L2_ETHER_VLAN: u32 = 0x00020000; 
pub const RTE_PTYPE_INNER_L2_MASK: u32 = 0x000f0000; 
pub const RTE_PTYPE_INNER_L3_IPV4: u32 = 0x00100000; 
pub const RTE_PTYPE_INNER_L3_IPV4_EXT: u32 = 0x00200000; 
pub const RTE_PTYPE_INNER_L3_IPV4_EXT_UNKNOWN: u32 = 0x00400000; 
pub const RTE_PTYPE_INNER_L3_IPV6: u32 = 0x00300000; 
pub const RTE_PTYPE_INNER_L3_IPV6_EXT: u32 = 0x00500000; 
pub const RTE_PTYPE_INNER_L3_IPV6_EXT_UNKNOWN: u32 = 0x00600000; 
pub const RTE_PTYPE_INNER_L3_MASK: u32 = 0x00f00000; 
pub const RTE_PTYPE_INNER_L4_FRAG: u32 = 0x03000000; 
pub const RTE_PTYPE_INNER_L4_ICMP: u32 = 0x05000000; 
pub const RTE_PTYPE_INNER_L4_MASK: u32 = 0x0f000000; 
pub const RTE_PTYPE_INNER_L4_NONFRAG: u32 = 0x06000000; 
pub const RTE_PTYPE_INNER_L4_SCTP: u32 = 0x04000000; 
pub const RTE_PTYPE_INNER_L4_TCP: u32 = 0x01000000; 
pub const RTE_PTYPE_INNER_L4_UDP: u32 = 0x02000000; 
pub const RTE_PTYPE_L2_ETHER: u32 = 0x00000001; 
pub const RTE_PTYPE_L2_ETHER_ARP: u32 = 0x00000003; 
pub const RTE_PTYPE_L2_ETHER_LLDP: u32 = 0x00000004; 
pub const RTE_PTYPE_L2_ETHER_TIMESYNC: u32 = 0x00000002; 
pub const RTE_PTYPE_L2_MASK: u32 = 0x0000000f; 
pub const RTE_PTYPE_L3_IPV4: u32 = 0x00000010; 
pub const RTE_PTYPE_L3_IPV4_EXT: u32 = 0x00000030; 
pub const RTE_PTYPE_L3_IPV4_EXT_UNKNOWN: u32 = 0x00000090; 
pub const RTE_PTYPE_L3_IPV6: u32 = 0x00000040; 
pub const RTE_PTYPE_L3_IPV6_EXT: u32 = 0x000000c0; 
pub const RTE_PTYPE_L3_IPV6_EXT_UNKNOWN: u32 = 0x000000e0; 
pub const RTE_PTYPE_L3_MASK: u32 = 0x000000f0; 
pub const RTE_PTYPE_L4_FRAG: u32 = 0x00000300; 
pub const RTE_PTYPE_L4_ICMP: u32 = 0x00000500; 
pub const RTE_PTYPE_L4_MASK: u32 = 0x00000f00; 
pub const RTE_PTYPE_L4_NONFRAG: u32 = 0x00000600; 
pub const RTE_PTYPE_L4_SCTP: u32 = 0x00000400; 
pub const RTE_PTYPE_L4_TCP: u32 = 0x00000100; 
pub const RTE_PTYPE_L4_UDP: u32 = 0x00000200; 
pub const RTE_PTYPE_TUNNEL_GENEVE: u32 = 0x00005000; 
pub const RTE_PTYPE_TUNNEL_GRE: u32 = 0x00002000; 
pub const RTE_PTYPE_TUNNEL_GRENAT: u32 = 0x00006000; 
pub const RTE_PTYPE_TUNNEL_IP: u32 = 0x00001000; 
pub const RTE_PTYPE_TUNNEL_MASK: u32 = 0x0000f000; 
pub const RTE_PTYPE_TUNNEL_NVGRE: u32 = 0x00004000; 
pub const RTE_PTYPE_TUNNEL_VXLAN: u32 = 0x00003000; 
pub const RTE_PTYPE_UNKNOWN: u32 = 0x00000000; 
pub const RTE_QAT_PMD_MAX_NB_SESSIONS: u32 = 2048; 
pub const RTE_RETA_GROUP_SIZE: u32 = 64; 
pub const RTE_RING_MZ_PREFIX: &'static str = "RG_"; 
pub const RTE_RING_NAMESIZE: u32 = 32; 
pub const RTE_RING_PAUSE_REP_COUNT: u32 = 0; 
pub const RTE_RING_QUOT_EXCEED: u32 = 1 << 31; // (1 << 31)
pub const RTE_RING_SZ_MASK: u32 = 0x0fffffff; // (unsigned)(0x0fffffff)
pub const RTE_RTM_MAX_RETRIES: u32 = 10; // (10)
pub const RTE_RWLOCK_INITIALIZER: u32 = 0; // { 0 }
pub const RTE_SCHED_PORT_N_GRINDERS: u32 = 8; 
pub const RTE_SPINLOCK_INITIALIZER: u32 = 0; // { 0 }
pub const RTE_TAILQ_NAMESIZE: u32 = 32; 
pub const RTE_TAILQ_RING_NAME: &'static str = "RTE_RING"; 
pub const RTE_TEST_PMD: u32 = 1; 
pub const RTE_TIMER_CONFIG: u32 = 3; 
pub const RTE_TIMER_NO_OWNER: i32 = -2; 
pub const RTE_TIMER_PENDING: u32 = 1; 
pub const RTE_TIMER_RUNNING: u32 = 2; 
pub const RTE_TIMER_STOP: u32 = 0; 
pub const RTE_TOOLCHAIN: &'static str = "gcc"; 
pub const RTE_TOOLCHAIN_GCC: u32 = 1; 
pub const RTE_VER_MINOR: u32 = 0; 
pub const RTE_VER_MONTH: u32 = 4; 
pub const RTE_VER_PREFIX: &'static str = "DPDK"; 
pub const RTE_VER_RELEASE: u32 = 16; 
pub const RTE_VER_SUFFIX: &'static str = ""; 
pub const RTE_VER_YEAR: u32 = 16; 
pub const RTE_XABORT_CAPACITY: u32 = 1 << 3; // (1 << 3)
pub const RTE_XABORT_CONFLICT: u32 = 1 << 2; // (1 << 2)
pub const RTE_XABORT_DEBUG: u32 = 1 << 4; // (1 << 4)
pub const RTE_XABORT_EXPLICIT: u32 = 1 << 0; // (1 << 0)
pub const RTE_XABORT_LOCK_BUSY: u32 = 0xff; // (0xff)
pub const RTE_XABORT_NESTED: u32 = 1 << 5; // (1 << 5)
pub const RTE_XABORT_RETRY: u32 = 1 << 1; // (1 << 1)

// skipped

// #define ETHER_HDR_LEN	(ETHER_ADDR_LEN * 2 + ETHER_TYPE_LEN)
// #define ETHER_MAX_VLAN_FRAME_LEN	(ETHER_MAX_LEN + 4)
// #define ETHER_MTU	(ETHER_MAX_LEN - ETHER_HDR_LEN - ETHER_CRC_LEN)
// #define ETHER_VXLAN_HLEN	(sizeof(struct udp_hdr) + sizeof(struct vxlan_hdr))
// #define ETH_DCB_NONE	ETH_MQ_TX_NONE
// #define ETH_DCB_RX	ETH_MQ_RX_DCB
// #define ETH_DCB_TX	ETH_MQ_TX_DCB
// #define ETH_RSS	ETH_MQ_RX_RSS
// #define ETH_RSS_FRAG_IPV4	(1ULL << RTE_ETH_FLOW_FRAG_IPV4)
// #define ETH_RSS_FRAG_IPV6	(1ULL << RTE_ETH_FLOW_FRAG_IPV6)
// #define ETH_RSS_IP	( ETH_RSS_IPV4 | ETH_RSS_FRAG_IPV4 | ETH_RSS_NONFRAG_IPV4_OTHER | ETH_RSS_IPV6 | ETH_RSS_FRAG_IPV6 | ETH_RSS_NONFRAG_IPV6_OTHER | ETH_RSS_IPV6_EX)
// #define ETH_RSS_IPV4	(1ULL << RTE_ETH_FLOW_IPV4)
// #define ETH_RSS_IPV6	(1ULL << RTE_ETH_FLOW_IPV6)
// #define ETH_RSS_IPV6_EX	(1ULL << RTE_ETH_FLOW_IPV6_EX)
// #define ETH_RSS_IPV6_TCP_EX	(1ULL << RTE_ETH_FLOW_IPV6_TCP_EX)
// #define ETH_RSS_IPV6_UDP_EX	(1ULL << RTE_ETH_FLOW_IPV6_UDP_EX)
// #define ETH_RSS_L2_PAYLOAD	(1ULL << RTE_ETH_FLOW_L2_PAYLOAD)
// #define ETH_RSS_NONFRAG_IPV4_OTHER	(1ULL << RTE_ETH_FLOW_NONFRAG_IPV4_OTHER)
// #define ETH_RSS_NONFRAG_IPV4_SCTP	(1ULL << RTE_ETH_FLOW_NONFRAG_IPV4_SCTP)
// #define ETH_RSS_NONFRAG_IPV4_TCP	(1ULL << RTE_ETH_FLOW_NONFRAG_IPV4_TCP)
// #define ETH_RSS_NONFRAG_IPV4_UDP	(1ULL << RTE_ETH_FLOW_NONFRAG_IPV4_UDP)
// #define ETH_RSS_NONFRAG_IPV6_OTHER	(1ULL << RTE_ETH_FLOW_NONFRAG_IPV6_OTHER)
// #define ETH_RSS_NONFRAG_IPV6_SCTP	(1ULL << RTE_ETH_FLOW_NONFRAG_IPV6_SCTP)
// #define ETH_RSS_NONFRAG_IPV6_TCP	(1ULL << RTE_ETH_FLOW_NONFRAG_IPV6_TCP)
// #define ETH_RSS_NONFRAG_IPV6_UDP	(1ULL << RTE_ETH_FLOW_NONFRAG_IPV6_UDP)
// #define ETH_RSS_PROTO_MASK	( ETH_RSS_IPV4 | ETH_RSS_FRAG_IPV4 | ETH_RSS_NONFRAG_IPV4_TCP | ETH_RSS_NONFRAG_IPV4_UDP | ETH_RSS_NONFRAG_IPV4_SCTP | ETH_RSS_NONFRAG_IPV4_OTHER | ETH_RSS_IPV6 | ETH_RSS_FRAG_IPV6 | ETH_RSS_NONFRAG_IPV6_TCP | ETH_RSS_NONFRAG_IPV6_UDP | ETH_RSS_NONFRAG_IPV6_SCTP | ETH_RSS_NONFRAG_IPV6_OTHER | ETH_RSS_L2_PAYLOAD | ETH_RSS_IPV6_EX | ETH_RSS_IPV6_TCP_EX | ETH_RSS_IPV6_UDP_EX)
// #define ETH_RSS_SCTP	( ETH_RSS_NONFRAG_IPV4_SCTP | ETH_RSS_NONFRAG_IPV6_SCTP)
// #define ETH_RSS_TCP	( ETH_RSS_NONFRAG_IPV4_TCP | ETH_RSS_NONFRAG_IPV6_TCP | ETH_RSS_IPV6_TCP_EX)
// #define ETH_RSS_UDP	( ETH_RSS_NONFRAG_IPV4_UDP | ETH_RSS_NONFRAG_IPV6_UDP | ETH_RSS_IPV6_UDP_EX)
// #define ETH_TXQ_FLAGS_NOOFFLOADS	(ETH_TXQ_FLAGS_NOVLANOFFL | ETH_TXQ_FLAGS_NOXSUMSCTP | ETH_TXQ_FLAGS_NOXSUMUDP | ETH_TXQ_FLAGS_NOXSUMTCP)
// #define ETH_TXQ_FLAGS_NOXSUMS	(ETH_TXQ_FLAGS_NOXSUMSCTP | ETH_TXQ_FLAGS_NOXSUMUDP | ETH_TXQ_FLAGS_NOXSUMTCP)
// #define ETH_VMDQ_DCB_TX	ETH_MQ_TX_VMDQ_DCB
// #define IPV4_HDR_DF_FLAG	(1 << IPV4_HDR_DF_SHIFT)
// #define IPV4_HDR_MF_FLAG	(1 << IPV4_HDR_MF_SHIFT)
// #define IPV4_HDR_OFFSET_MASK	((1 << IPV4_HDR_MF_SHIFT) - 1)
// #define IPV4_MAX_MCAST	IPv4(239, 255, 255, 255)
// #define IPV4_MIN_MCAST	IPv4(224, 0, 0, 0)
// #define RDLINE_HISTORY_BUF_SIZE	BUFSIZ
// #define RTE_2TUPLE_FLAGS	( RTE_NTUPLE_FLAGS_DST_PORT | RTE_NTUPLE_FLAGS_PROTO)
// #define RTE_5TUPLE_FLAGS	( RTE_NTUPLE_FLAGS_DST_IP | RTE_NTUPLE_FLAGS_SRC_IP | RTE_NTUPLE_FLAGS_DST_PORT | RTE_NTUPLE_FLAGS_SRC_PORT | RTE_NTUPLE_FLAGS_PROTO)
// #define RTE_ALIGN(val,align)	RTE_ALIGN_CEIL(val, align)
// #define RTE_ALIGN_CEIL(val,align)	RTE_ALIGN_FLOOR(((val) + ((typeof(val)) (align) - 1)), align)
// #define RTE_ALIGN_FLOOR(val,align)	(typeof(val))((val) & (~((typeof(val))((align) - 1))))
// #define RTE_ATOMIC16_INIT(val)	{ (val) }
// #define RTE_ATOMIC32_INIT(val)	{ (val) }
// #define RTE_ATOMIC64_INIT(val)	{ (val) }
// #define RTE_BUILD_BUG_ON(condition)	((void)sizeof(char[1 - 2*!!(condition)]))
// #define RTE_BYTE_ORDER	RTE_LITTLE_ENDIAN
// #define RTE_CACHE_LINE_MASK	(RTE_CACHE_LINE_SIZE-1)
// #define RTE_CACHE_LINE_ROUNDUP(size)	(RTE_CACHE_LINE_SIZE * ((size + RTE_CACHE_LINE_SIZE - 1) / RTE_CACHE_LINE_SIZE))
// #define RTE_COMPILE_TIME_CPUFLAGS	RTE_CPUFLAG_SSE,RTE_CPUFLAG_SSE2,RTE_CPUFLAG_SSE3,RTE_CPUFLAG_SSSE3,RTE_CPUFLAG_SSE4_1,RTE_CPUFLAG_SSE4_2,RTE_CPUFLAG_AES,RTE_CPUFLAG_PCLMULQDQ,RTE_CPUFLAG_AVX,RTE_CPUFLAG_RDRAND,RTE_CPUFLAG_FSGSBASE,RTE_CPUFLAG_F16C,RTE_CPUFLAG_AVX2
// #define RTE_DECLARE_PER_LCORE(type,name)	extern __thread __typeof__(type) per_lcore_ ##name
// #define RTE_DEFINE_PER_LCORE(type,name)	__thread __typeof__(type) per_lcore_ ##name
// #define RTE_DIM(a)	(sizeof (a) / sizeof ((a)[0]))
// #define RTE_DOM0_IOCTL_ATTACH_TO_MEMSEG	_IOWR(0, 2 , char *)
// #define RTE_DOM0_IOCTL_GET_MEMSEG_INFO	_IOWR(0, 4, void *)
// #define RTE_DOM0_IOCTL_GET_NUM_MEMSEG	_IOWR(0, 3, int)
// #define RTE_DOM0_IOCTL_PREPARE_MEMSEG	_IOWR(0, 1 , struct memory_info)
// #define RTE_EAL_MEMPOOL_RWLOCK	(&rte_eal_get_configuration()->mem_config->mplock)
// #define RTE_EAL_TAILQ_RWLOCK	(&rte_eal_get_configuration()->mem_config->qlock)
// #define RTE_ETHDEV_HAS_LRO_SUPPORT	
// #define RTE_ETH_DEV_SRIOV(dev)	((dev)->data->sriov)
// #define RTE_ETH_IS_IPV4_HDR(ptype)	((ptype) & RTE_PTYPE_L3_IPV4)
// #define RTE_ETH_IS_IPV6_HDR(ptype)	((ptype) & RTE_PTYPE_L3_IPV6)
// #define RTE_ETH_IS_TUNNEL_PKT(ptype)	((ptype) & (RTE_PTYPE_TUNNEL_MASK | RTE_PTYPE_INNER_L2_MASK | RTE_PTYPE_INNER_L3_MASK | RTE_PTYPE_INNER_L4_MASK))
// #define RTE_ETH_TX_BUFFER_SIZE(sz)	(sizeof(struct rte_eth_dev_tx_buffer) + (sz) * sizeof(struct rte_mbuf *))
// #define RTE_ETH_VALID_PORTID_OR_ERR_RET(port_id,retval)	do { if (!rte_eth_dev_is_valid_port(port_id)) { RTE_PMD_DEBUG_TRACE("Invalid port_id=%d\n", port_id); return retval; } } while (0)
// #define RTE_ETH_VALID_PORTID_OR_RET(port_id)	do { if (!rte_eth_dev_is_valid_port(port_id)) { RTE_PMD_DEBUG_TRACE("Invalid port_id=%d\n", port_id); return; } } while (0)
// #define RTE_FLEX_FILTER_MASK_SIZE	(RTE_ALIGN(RTE_FLEX_FILTER_MAXLEN, CHAR_BIT) / CHAR_BIT)
// #define RTE_FLOW_MASK_ARRAY_SIZE	(RTE_ALIGN(RTE_ETH_FLOW_MAX, UINT32_BIT)/UINT32_BIT)
// #define RTE_FUNC_PTR_OR_ERR_RET(func,retval)	do { if ((func) == NULL) { RTE_PMD_DEBUG_TRACE("Function not supported\n"); return retval; } } while (0)
// #define RTE_FUNC_PTR_OR_RET(func)	do { if ((func) == NULL) { RTE_PMD_DEBUG_TRACE("Function not supported\n"); return; } } while (0)
// #define RTE_KNI_IOCTL_CREATE	_IOWR(0, 2, struct rte_kni_device_info)
// #define RTE_KNI_IOCTL_RELEASE	_IOWR(0, 3, struct rte_kni_device_info)
// #define RTE_KNI_IOCTL_TEST	_IOWR(0, 1, int)
// #define RTE_LCORE_FOREACH(i)	for (i = rte_get_next_lcore(-1, 0, 0); i<RTE_MAX_LCORE; i = rte_get_next_lcore(i, 0, 0))
// #define RTE_LCORE_FOREACH_SLAVE(i)	for (i = rte_get_next_lcore(-1, 1, 0); i<RTE_MAX_LCORE; i = rte_get_next_lcore(i, 1, 0))
// #define RTE_LEN2MASK(ln,tp)	((tp)((uint64_t)-1 >> (sizeof(uint64_t) * CHAR_BIT - (ln))))
// #define RTE_LOG(l,t,...)	(void)((RTE_LOG_ ## l <= RTE_LOG_LEVEL) ? rte_log(RTE_LOG_ ## l, RTE_LOGTYPE_ ## t, #t ": " __VA_ARGS__) : 0)
// #define RTE_MAX(a,b)	({ typeof (a) _a = (a); typeof (b) _b = (b); _a > _b ? _a : _b; })
// #define RTE_MBUF_ASSERT(exp)	do { } while (0)
// #define RTE_MBUF_DEFAULT_BUF_SIZE	(RTE_MBUF_DEFAULT_DATAROOM + RTE_PKTMBUF_HEADROOM)
// #define RTE_MBUF_DIRECT(mb)	(!RTE_MBUF_INDIRECT(mb))
// #define RTE_MBUF_INDIRECT(mb)	((mb)->ol_flags & IND_ATTACHED_MBUF)
// #define RTE_MBUF_PREFETCH_TO_FREE(m)	do { if ((m) != NULL) rte_prefetch0(m); } while (0)
// #define RTE_MEMPOOL_ALIGN	RTE_CACHE_LINE_SIZE
// #define RTE_MEMPOOL_ALIGN_MASK	(RTE_MEMPOOL_ALIGN - 1)
// #define RTE_MEMPOOL_MZ_FORMAT	RTE_MEMPOOL_MZ_PREFIX "%s"
// #define RTE_MEMPOOL_OBJ_NAME	RTE_MEMPOOL_MZ_FORMAT
// #define RTE_MIN(a,b)	({ typeof (a) _a = (a); typeof (b) _b = (b); _a < _b ? _a : _b; })
// #define RTE_PCI_DEVICE(vend,dev)	.vendor_id = (vend), .device_id = (dev), .subsystem_vendor_id = PCI_ANY_ID, .subsystem_device_id = PCI_ANY_ID
// #define RTE_PER_LCORE(name)	(per_lcore_ ##name)
// #define RTE_PMD_DEBUG_TRACE(...)	
// #define RTE_PROC_PRIMARY_OR_ERR_RET(retval)	do { if (rte_eal_process_type() != RTE_PROC_PRIMARY) { RTE_PMD_DEBUG_TRACE("Cannot run in secondary processes\n"); return retval; } } while (0)
// #define RTE_PROC_PRIMARY_OR_RET()	do { if (rte_eal_process_type() != RTE_PROC_PRIMARY) { RTE_PMD_DEBUG_TRACE("Cannot run in secondary processes\n"); return; } } while (0)
// #define RTE_PTR_ADD(ptr,x)	((void*)((uintptr_t)(ptr) + (x)))
// #define RTE_PTR_ALIGN(ptr,align)	RTE_PTR_ALIGN_CEIL(ptr, align)
// #define RTE_PTR_ALIGN_CEIL(ptr,align)	RTE_PTR_ALIGN_FLOOR((typeof(ptr))RTE_PTR_ADD(ptr, (align) - 1), align)
// #define RTE_PTR_ALIGN_FLOOR(ptr,align)	((typeof(ptr))RTE_ALIGN_FLOOR((uintptr_t)ptr, align))
// #define RTE_PTR_DIFF(ptr1,ptr2)	((uintptr_t)(ptr1) - (uintptr_t)(ptr2))
// #define RTE_PTR_SUB(ptr,x)	((void*)((uintptr_t)ptr - (x)))
// #define RTE_SET_USED(x)	(void)(x)
// #define RTE_SPINLOCK_RECURSIVE_INITIALIZER	{RTE_SPINLOCK_INITIALIZER, -1, 0}
// #define RTE_STR(x)	_RTE_STR(x)
// #define RTE_SYM_HASH_MASK_ARRAY_SIZE	(RTE_ALIGN(RTE_ETH_FLOW_MAX, UINT32_BIT)/UINT32_BIT)
// #define RTE_TAILQ_CAST(tailq_entry,struct_name)	(struct struct_name *)&(tailq_entry)->tailq_head
// #define RTE_TAILQ_LOOKUP(name,struct_name)	RTE_TAILQ_CAST(rte_eal_tailq_lookup(name), struct_name)
// #define RTE_TIMER_INITIALIZER	{ .status = {{ .state = RTE_TIMER_STOP, .owner = RTE_TIMER_NO_OWNER, }}, }
// #define RTE_TUNNEL_FILTER_IMAC_IVLAN	(ETH_TUNNEL_FILTER_IMAC | ETH_TUNNEL_FILTER_IVLAN)
// #define RTE_TUNNEL_FILTER_IMAC_IVLAN_TENID	(ETH_TUNNEL_FILTER_IMAC | ETH_TUNNEL_FILTER_IVLAN | ETH_TUNNEL_FILTER_TENID)
// #define RTE_TUNNEL_FILTER_IMAC_TENID	(ETH_TUNNEL_FILTER_IMAC | ETH_TUNNEL_FILTER_TENID)
// #define RTE_TUNNEL_FILTER_OMAC_TENID_IMAC	(ETH_TUNNEL_FILTER_OMAC | ETH_TUNNEL_FILTER_TENID | ETH_TUNNEL_FILTER_IMAC)
// #define RTE_VERIFY(exp)	do { if (!(exp)) rte_panic("line %d\tassert \"" #exp "\" failed\n", __LINE__); } while (0)
// #define RTE_VERSION	RTE_VERSION_NUM( RTE_VER_YEAR, RTE_VER_MONTH, RTE_VER_MINOR, RTE_VER_RELEASE)
// #define RTE_VERSION_NUM(a,b,c,d)	((a) << 24 | (b) << 16 | (c) << 8 | (d))
// #define RTE_XABORT_CODE(x)	(((x) >> 24) & 0xff)
// #define RTE_XBEGIN_STARTED	(~0u)
